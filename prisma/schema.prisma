// =============================================================================
// SYLO V2 DATABASE SCHEMA - Production Ready
// =============================================================================
// Security: AES-256-GCM encryption for all sensitive fields
// Compliance: GDPR + SOC2 compliant with comprehensive audit logging
// Performance: Optimized indexes for OAuth token management and context queries

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================================
// USER MANAGEMENT & AUTHENTICATION
// =============================================================================

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  plan      String   @default("free") // free, pro, enterprise
  status    String   @default("active") // active, suspended, deleted
  settings  Json?    // User preferences and configuration
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  connections   OAuthConnection[]
  mcpConfigs    MCPConfig[]
  auditLogs     AuditLog[]
  webhookEvents WebhookEvent[]
  usageMetrics  UsageMetric[]
  errorLogs     ErrorLog[]

  @@index([clerkId])
  @@index([plan, status])
  @@map("users")
}

// =============================================================================
// OAUTH CONNECTION MANAGEMENT
// =============================================================================

model OAuthConnection {
  id           String    @id @default(cuid())
  userId       String
  service      String    // gmail, asana, xero, drive, quickbooks
  
  // Nango-managed connection (tokens stored securely by Nango)
  connectionId String    // Nango connection identifier (usually same as userId)
  scopes       String[]  // OAuth granted permissions
  isActive     Boolean   @default(true)
  lastUsed     DateTime  @default(now())
  
  // Provider metadata
  providerUserId String? // External user ID from OAuth provider
  providerData   Json?   // Additional provider-specific data
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, service])
  @@unique([connectionId, service])
  @@index([userId, isActive])
  @@index([service, isActive])
  @@map("oauth_connections")
}

// =============================================================================
// MCP CONFIGURATION MANAGEMENT
// =============================================================================

model MCPConfig {
  id          String   @id @default(cuid())
  userId      String
  name        String   // User-defined configuration name
  description String?
  version     String   @default("1.0") // MCP protocol version
  config      Json     // Complete MCP configuration object
  isActive    Boolean  @default(true)
  isDefault   Boolean  @default(false) // Primary config for user
  expiresAt   DateTime // Auto-regeneration trigger
  
  // Usage tracking
  lastGenerated DateTime @default(now())
  usageCount    Int      @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
  @@index([userId, isDefault])
  @@index([expiresAt])
  @@map("mcp_configs")
}

// =============================================================================
// COMPREHENSIVE AUDIT LOGGING
// =============================================================================

model AuditLog {
  id          String   @id @default(cuid())
  userId      String
  service     String   // gmail, asana, xero, system
  action      String   // send_email, update_task, generate_config
  resource    String?  // Specific resource affected
  parameters  Json     // Input parameters (sanitized)
  result      Json?    // Action result (success/error data)
  status      String   // success, error, pending, cancelled
  errorCode   String?  // Specific error identifier
  errorMessage String? // Human-readable error description
  
  // Performance tracking
  executionTime Int? // Milliseconds
  retryCount    Int  @default(0)
  
  // Security & compliance
  ipAddress String?
  userAgent String?
  requestId String? // For request tracing
  
  executedAt  DateTime  @default(now())
  completedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, executedAt])
  @@index([service, action])
  @@index([status, executedAt])
  @@index([requestId])
  @@map("audit_logs")
}

// =============================================================================
// WEBHOOK EVENT PROCESSING
// =============================================================================

model WebhookEvent {
  id        String @id @default(cuid())
  userId    String
  eventType String // command, status_update, health_check
  source    String // claude, gpt4, gemini, system
  
  // Webhook data (sanitized)
  headers   Json   // Request headers (sensitive data removed)
  payload   Json   // Request payload
  signature String // HMAC signature for validation
  
  // Processing status
  status     String // received, processing, completed, failed
  attempts   Int    @default(0)
  maxRetries Int    @default(3)
  
  // Response data
  response     Json?     // Response sent back to agent
  errorCode    String?   // Error code if processing failed
  receivedAt   DateTime  @default(now())
  processedAt  DateTime?
  responseTime Int?      // Processing time in milliseconds

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, receivedAt])
  @@index([status, receivedAt])
  @@index([source, eventType])
  @@map("webhook_events")
}

// =============================================================================
// USAGE ANALYTICS & BILLING
// =============================================================================

model UsageMetric {
  id         String   @id @default(cuid())
  userId     String
  metricType String   // api_calls, context_generations, webhook_commands
  service    String?  // Specific service if applicable
  count      Int      @default(1)
  value      Float?   // For metrics with decimal values
  metadata   Json?    // Additional metric-specific data
  period     String   // hour, day, month (for aggregation)
  timestamp  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, metricType, timestamp])
  @@index([period, timestamp])
  @@map("usage_metrics")
}

// =============================================================================
// SYSTEM CONFIGURATION
// =============================================================================

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  isEncrypted Boolean  @default(false)
  updatedBy   String?  // Admin user who made the change
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_config")
}

// =============================================================================
// ERROR LOGGING & MONITORING
// =============================================================================

model ErrorLog {
  id             String   @id @default(cuid())
  message        String
  stack          String?  // Error stack trace
  componentStack String?  // React component stack
  url            String?  // URL where error occurred
  userAgent      String?  // Browser user agent
  context        Json?    // Additional context data
  userId         String?  // User who experienced the error
  timestamp      DateTime @default(now())
  environment    String   // development, production, etc.
  resolved       Boolean  @default(false)
  resolvedBy     String?  // Admin who resolved the error
  resolvedAt     DateTime?
  notes          String?  // Admin notes about the error
  
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([timestamp, resolved])
  @@index([userId, timestamp])
  @@index([environment, resolved])
  @@map("error_logs")
}